# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.025) #inset adds some space between the legend and the plot's edge
# Define a vector of colors for the different plots
coul <- c("black", "red", "green", "blue")
# Plot the binomial distribution for n = 5, p = 0.5
fd <- dbinom(c(0:5), 5, 0.5)
plot(fd ~ c(0:5), xlim = c(0, 20), ylim = c(0, 0.40), type = "p", ylab = " ", xlab = " ",
pch = 15, cex = 2, lwd = 3, col = coul[1], cex.axis = 2)
# Add the binomial distribution for n = 10, p = 0.5
fd <- dbinom(c(0:10), 10, 0.5)
points(fd ~ c(0:10), type = "p", pch = 16, cex = 2, lwd = 3, col = coul[2])
# Add the binomial distribution for n = 20, p = 0.5
fd <- dbinom(c(0:20), 20, 0.5)
points(fd ~ c(0:20), type = "p", pch = 17, cex = 2, lwd = 3, col = coul[3])
# Create the legend text
legtxt <- c(expression(paste(italic(n), " = 5", sep = "")),
expression(paste(italic(n), " = 10", sep = "")),
expression(paste(italic(n), " = 20", sep = "")))
# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.025) #inset adds some space between the legend and the plot's edge
# Define a vector of colors for the different plots
coul <- c("black", "red", "green", "blue")
# Plot the binomial distribution for n = 5, p = 0.5
fd <- dbinom(c(0:5), 5, 0.5)
plot(fd ~ c(0:5), xlim = c(0, 20), ylim = c(0, 0.40), type = "p", ylab = " ", xlab = " ",
pch = 15, cex = 2, lwd = 3, col = coul[1], cex.axis = 2)
# Add the binomial distribution for n = 10, p = 0.5
fd <- dbinom(c(0:10), 10, 0.5)
points(fd ~ c(0:10), type = "p", pch = 16, cex = 2, lwd = 3, col = coul[2])
# Add the binomial distribution for n = 20, p = 0.5
fd <- dbinom(c(0:20), 20, 0.5)
points(fd ~ c(0:20), type = "p", pch = 17, cex = 2, lwd = 3, col = coul[3])
# Create the legend text
legtxt <- c(expression(paste(italic(n), " = 5", sep = "")),
expression(paste(italic(n), " = 10", sep = "")),
expression(paste(italic(n), " = 20", sep = "")))
# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.075) #inset adds some space between the legend and the plot's edge
# Define a vector of colors for the different plots
coul <- c("black", "red", "green", "blue")
# Plot the binomial distribution for n = 5, p = 0.5
fd <- dbinom(c(0:5), 5, 0.5)
plot(fd ~ c(0:5), xlim = c(0, 20), ylim = c(0, 0.40), type = "p", ylab = " ", xlab = " ",
pch = 15, cex = 2, lwd = 3, col = coul[1], cex.axis = 2)
# Add the binomial distribution for n = 10, p = 0.5
fd <- dbinom(c(0:10), 10, 0.5)
points(fd ~ c(0:10), type = "p", pch = 16, cex = 2, lwd = 3, col = coul[2])
# Add the binomial distribution for n = 20, p = 0.5
fd <- dbinom(c(0:20), 20, 0.5)
points(fd ~ c(0:20), type = "p", pch = 17, cex = 2, lwd = 3, col = coul[3])
# Create the legend text
legtxt <- c(expression(paste(italic(n), " = 5", sep = "")),
expression(paste(italic(n), " = 10", sep = "")),
expression(paste(italic(n), " = 20", sep = "")))
# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.050) #inset adds some space between the legend and the plot's edge
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]),
cex=1.6,bg="white",inset=0.0375)}
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]),
cex=1.6,bg="white",inset=0.0275)}
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]),
cex=1.6,bg="white",inset=0.0175)}
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]),
cex=1.6,bg="white",inset=0.0225)}
# Plot the normal distribution curve (N(0,1))
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
# Add the Student's t-distribution curve with 1 degree of freedom
# dt(x, 1): The t-distribution with 1 degree of freedom.
# lty = 1: Solid line type for this curve.
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
# Student's t-distribution curve with 2 degrees of freedom
# lty = 2: Dashed line for this curve.
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
# Student's t-distribution curve with 5 degrees of freedom
# lty = 4: Dash-dot line type for this curve.
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
# Create the legend text with labels for different degrees of freedom and the normal distribution
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
# Add the legend to the plot
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]), cex=1.6,bg="white",inset=0.0225)}
# Plot the normal distribution curve (N(0,1))
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
# Add the Student's t-distribution curve with 1 degree of freedom
# dt(x, 1): The t-distribution with 1 degree of freedom.
# lty = 1: Solid line type for this curve.
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
# Student's t-distribution curve with 2 degrees of freedom
# lty = 2: Dashed line for this curve.
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
# Student's t-distribution curve with 5 degrees of freedom
# lty = 4: Dash-dot line type for this curve.
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
# Create the legend text with labels for different degrees of freedom and the normal distribution
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
# Add the legend to the plot
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]), cex=1.6,bg="white",inset=0.0225)}
# Plot the normal distribution curve (N(0,1))
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
# Add the Student's t-distribution curve with 1 degree of freedom
# dt(x, 1): The t-distribution with 1 degree of freedom.
# lty = 1: Solid line type for this curve.
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
# Student's t-distribution curve with 2 degrees of freedom
# lty = 2: Dashed line for this curve.
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
# Student's t-distribution curve with 5 degrees of freedom
# lty = 4: Dash-dot line type for this curve.
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
# Create the legend text with labels for different degrees of freedom and the normal distribution
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
# Add the legend to the plot
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]), cex=1.6,bg="white",inset=0.0225)}
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200)
abline(v=246)
fd <- dbinom(c(0:330),330,0.85)
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("hrbrthemes")
library ("dplyr")
somlit <- read.table("2022_SOMLIT.txt", header=TRUE)
somlit
variables <- names(somlit)
variables
observations <- dim(somlit)
observations
observations <- observations[1]
print(paste("number of observations is", observations))
attach(somlit)
mean(CHLA)
median(CHLA)
sd(CHLA)
hist(CHLA)
#this is not the histogram we want. needs to be relative frequency
Hist <- hist (CHLA, plot =FALSE)
Hist #see the data within the histogram. it shows the count and breaks(x-axis) that we need to compute relative frequency
# relative frequencies of CHLA is the count divided by the sum of the counts, this is the y value
(barplot(Hist$counts/sum(Hist$counts),
ylab="Relative frequency",
names.arg=Hist$mids, xlab=expression(paste("CHLA(",mu,"g/L)")),
main="Histogram of the relative frequency of CHLA"))
ggplot(data = somlit, aes(x = CHLA)) +
geom_histogram(aes(y = ..count../sum(..count..)),
breaks =seq(0, 9, by = 1), fill = "gray", color = "black") +
labs(x = expression(paste("CHLA (", mu, "g/L)")),
y = "Relative frequency",
title = "Histogram of the relative frequency of CHLA") +
theme_minimal()
#fix the date and time data type and formatting
somlit$DATE <- as.Date(somlit$DATE, format = "%d/%m/%Y")
#now the Date is no longer a character
plot(somlit$DATE, somlit$CHLA, type = "b",
ylab = expression(paste("CHLA (", mu, "g/L)")),
xlab = "Date",
main = "Time Series of CHLA",
xaxt = "n")  # Suppress the default x-axis
#to have the same x labels as Lubac's solution
# Customize the x-axis with specific breaks
axis.Date(1, at = seq(min(date), max(date), by = "2 years"), format = "%Y")
# Generate the ggplot time series
ggplot(somlit, aes(x = DATE, y = CHLA)) +
geom_line() + # Adds lines connecting the points
geom_point() + # Adds points on the graph
scale_x_date(date_breaks = "2 years", date_labels = "%Y") + # Customizes the x-axis to show years at 2-year intervals
labs(x = "Date", y = expression(paste("CHLA (", mu, "g/L)")),
title = "Time Series of CHLA") +
theme_minimal() + # Apply a minimal theme for clean styling
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
tapply(CHLA,Season,mean) # Calculate the mean CHLA value for each season
tapply(CHLA,Season,sd) # Calculate the standard deviation of CHLA for each season
#visualize the mean and sd using a boxplot
boxplot(CHLA~Season,ylab = expression(paste("CHLA (",mu,"g/L)")))
#added some color for better visualization of the mean
ggplot(somlit, aes(x = Season, y=CHLA)) +
geom_boxplot(fill = "lightblue")+
stat_summary(fun = mean, geom = "point", shape = 20, size = 4, color = "darkblue") +  # Add mean as a dark blue point
labs(x ="Season", y= expression(paste("CHLA (", mu, "g/L"))) +
theme_minimal()  # Apply minimal theme for a clean plot
#we are only interested in spring
CHLA.spring<-somlit[Season=="spring","CHLA"]
Date.spring<-somlit[Season=="spring","DATE"]
#formula for standardizing a variable is (variable - mean)/sd
CHLA.stand<-(CHLA.spring-mean(CHLA.spring))/sd(CHLA.spring)
#plot the standardized
boxplot(CHLA.stand)
#these are the dates where CHLA > 2
Date.anomalies <-Date.spring[CHLA.stand>2]
Date.anomalies
# Filter the dataset to keep only Spring data and display DATE and CHLA columns
spring_data <- somlit %>%
filter(Season == "spring") %>%  # Filter for Spring season
select(DATE, CHLA)  # Select only DATE and CHLA columns
spring_data
# Standardize the CHLA variable
mean_chla <- mean(spring_data$CHLA) # Compute the mean of CHLA
sd_chla <- sd(spring_data$CHLA)  # Compute the standard deviation of CHLA
# Create a new column for standardized CHLA
spring_data <- spring_data %>%
mutate(CHLA_standardized = (spring_data$CHLA - mean_chla) / sd_chla)
# Plot the standardized CHLA
ggplot(spring_data, aes(y=CHLA)) +
geom_boxplot()+
labs(y= "Standardized CHLA") +
theme_minimal()
# Find dates associated with standardized CHLA > 2
anomalies <- spring_data %>%
filter(CHLA_standardized > 2) %>%
select(DATE, CHLA, CHLA_standardized)
# Display the results
anomalies
ggplot(somlit, aes(x=CHLA, y=SPM, color=Season))+
geom_point(size=4) +
theme_ipsum()
# Define a vector of colors for the different plots
coul <- c("black", "red", "green", "blue")
# Plot the binomial distribution for n = 5, p = 0.5
fd <- dbinom(c(0:5), 5, 0.5)
plot(fd ~ c(0:5), xlim = c(0, 20), ylim = c(0, 0.40), type = "p", ylab = " ", xlab = " ", pch = 15, cex = 2, lwd = 3, col = coul[1], cex.axis = 2)
# Add the binomial distribution for n = 10, p = 0.5
fd <- dbinom(c(0:10), 10, 0.5)
points(fd ~ c(0:10), type = "p", pch = 16, cex = 2, lwd = 3, col = coul[2])
# Add the binomial distribution for n = 20, p = 0.5
fd <- dbinom(c(0:20), 20, 0.5)
points(fd ~ c(0:20), type = "p", pch = 17, cex = 2, lwd = 3, col = coul[3])
# Create the legend text
legtxt <- c(expression(paste(italic(n), " = 5", sep = "")),
expression(paste(italic(n), " = 10", sep = "")),
expression(paste(italic(n), " = 20", sep = "")))
# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.050) #inset adds some space between the legend and the plot's edge
# Plot the normal distribution curve (N(0,1))
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
# Add the Student's t-distribution curve with 1 degree of freedom
# dt(x, 1): The t-distribution with 1 degree of freedom.
# lty = 1: Solid line type for this curve.
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
# Student's t-distribution curve with 2 degrees of freedom
# lty = 2: Dashed line for this curve.
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
# Student's t-distribution curve with 5 degrees of freedom
# lty = 4: Dash-dot line type for this curve.
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
# Create the legend text with labels for different degrees of freedom and the normal distribution
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
# Add the legend to the plot
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]), cex=1.6,bg="white",inset=0.0225)}
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
load("C:/MER2030/Sem1 UBx/Data Analysis in Environmental Sciences/R library/P2_WorkingDirectory/.RData")
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("hrbrthemes")
library ("dplyr")
somlit <- read.table("2022_SOMLIT.txt", header=TRUE)
somlit
variables <- names(somlit)
variables
observations <- dim(somlit)
observations
observations <- observations[1]
print(paste("number of observations is", observations))
attach(somlit)
mean(CHLA)
median(CHLA)
sd(CHLA)
hist(CHLA)
#this is not the histogram we want. needs to be relative frequency
Hist <- hist (CHLA, plot =FALSE)
Hist #see the data within the histogram. it shows the count and breaks(x-axis) that we need to compute relative frequency
# relative frequencies of CHLA is the count divided by the sum of the counts, this is the y value
(barplot(Hist$counts/sum(Hist$counts),
ylab="Relative frequency",
names.arg=Hist$mids, xlab=expression(paste("CHLA(",mu,"g/L)")),
main="Histogram of the relative frequency of CHLA"))
ggplot(data = somlit, aes(x = CHLA)) +
geom_histogram(aes(y = ..count../sum(..count..)),
breaks =seq(0, 9, by = 1), fill = "gray", color = "black") +
labs(x = expression(paste("CHLA (", mu, "g/L)")),
y = "Relative frequency",
title = "Histogram of the relative frequency of CHLA") +
theme_minimal()
#fix the date and time data type and formatting
somlit$DATE <- as.Date(somlit$DATE, format = "%d/%m/%Y")
#now the Date is no longer a character
plot(somlit$DATE, somlit$CHLA, type = "b",
ylab = expression(paste("CHLA (", mu, "g/L)")),
xlab = "Date",
main = "Time Series of CHLA",
xaxt = "n")  # Suppress the default x-axis
#to have the same x labels as Lubac's solution
# Customize the x-axis with specific breaks
axis.Date(1, at = seq(min(date), max(date), by = "2 years"), format = "%Y")
# Generate the ggplot time series
ggplot(somlit, aes(x = DATE, y = CHLA)) +
geom_line() + # Adds lines connecting the points
geom_point() + # Adds points on the graph
scale_x_date(date_breaks = "2 years", date_labels = "%Y") + # Customizes the x-axis to show years at 2-year intervals
labs(x = "Date", y = expression(paste("CHLA (", mu, "g/L)")),
title = "Time Series of CHLA") +
theme_minimal() + # Apply a minimal theme for clean styling
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
tapply(CHLA,Season,mean) # Calculate the mean CHLA value for each season
tapply(CHLA,Season,sd) # Calculate the standard deviation of CHLA for each season
#visualize the mean and sd using a boxplot
boxplot(CHLA~Season,ylab = expression(paste("CHLA (",mu,"g/L)")))
#added some color for better visualization of the mean
ggplot(somlit, aes(x = Season, y=CHLA)) +
geom_boxplot(fill = "lightblue")+
stat_summary(fun = mean, geom = "point", shape = 20, size = 4, color = "darkblue") +  # Add mean as a dark blue point
labs(x ="Season", y= expression(paste("CHLA (", mu, "g/L"))) +
theme_minimal()  # Apply minimal theme for a clean plot
#we are only interested in spring
CHLA.spring<-somlit[Season=="spring","CHLA"]
Date.spring<-somlit[Season=="spring","DATE"]
#formula for standardizing a variable is (variable - mean)/sd
CHLA.stand<-(CHLA.spring-mean(CHLA.spring))/sd(CHLA.spring)
#plot the standardized
boxplot(CHLA.stand)
#these are the dates where CHLA > 2
Date.anomalies <-Date.spring[CHLA.stand>2]
Date.anomalies
# Filter the dataset to keep only Spring data and display DATE and CHLA columns
spring_data <- somlit %>%
filter(Season == "spring") %>%  # Filter for Spring season
select(DATE, CHLA)  # Select only DATE and CHLA columns
spring_data
# Standardize the CHLA variable
mean_chla <- mean(spring_data$CHLA) # Compute the mean of CHLA
sd_chla <- sd(spring_data$CHLA)  # Compute the standard deviation of CHLA
# Create a new column for standardized CHLA
spring_data <- spring_data %>%
mutate(CHLA_standardized = (spring_data$CHLA - mean_chla) / sd_chla)
# Plot the standardized CHLA
ggplot(spring_data, aes(y=CHLA)) +
geom_boxplot()+
labs(y= "Standardized CHLA") +
theme_minimal()
# Find dates associated with standardized CHLA > 2
anomalies <- spring_data %>%
filter(CHLA_standardized > 2) %>%
select(DATE, CHLA, CHLA_standardized)
# Display the results
anomalies
ggplot(somlit, aes(x=CHLA, y=SPM, color=Season))+
geom_point(size=4) +
theme_ipsum()
# Define a vector of colors for the different plots
coul <- c("black", "red", "green", "blue")
# Plot the binomial distribution for n = 5, p = 0.5
fd <- dbinom(c(0:5), 5, 0.5)
plot(fd ~ c(0:5), xlim = c(0, 20), ylim = c(0, 0.40), type = "p", ylab = " ", xlab = " ", pch = 15, cex = 2, lwd = 3, col = coul[1], cex.axis = 2)
# Add the binomial distribution for n = 10, p = 0.5
fd <- dbinom(c(0:10), 10, 0.5)
points(fd ~ c(0:10), type = "p", pch = 16, cex = 2, lwd = 3, col = coul[2])
# Add the binomial distribution for n = 20, p = 0.5
fd <- dbinom(c(0:20), 20, 0.5)
points(fd ~ c(0:20), type = "p", pch = 17, cex = 2, lwd = 3, col = coul[3])
# Create the legend text
legtxt <- c(expression(paste(italic(n), " = 5", sep = "")),
expression(paste(italic(n), " = 10", sep = "")),
expression(paste(italic(n), " = 20", sep = "")))
# Add the legend to the plot
legend("topright", legtxt, title = expression(paste(italic(p), " = 0.5", sep = "")),
pch = c(15, 16, 17), col = c(coul[1], coul[2], coul[3]), cex = 2, bg = "white", inset = 0.050) #inset adds some space between the legend and the plot's edge
# Plot the normal distribution curve (N(0,1))
curve(dnorm,from=-4,to=4,ylab="",xlab="",lty=5,lwd=3,add=F,col=coul[1],cex.axis=2)
# Add the Student's t-distribution curve with 1 degree of freedom
# dt(x, 1): The t-distribution with 1 degree of freedom.
# lty = 1: Solid line type for this curve.
curve(dt(x,1),from=-4,to=4,ylab="",xlab="",lty=1,lwd=3,add=T,col=coul[2])
# Student's t-distribution curve with 2 degrees of freedom
# lty = 2: Dashed line for this curve.
curve(dt(x,2),from=-4,to=4,ylab="",xlab="",lty=2,lwd=3,add=T,col=coul[3])
# Student's t-distribution curve with 5 degrees of freedom
# lty = 4: Dash-dot line type for this curve.
curve(dt(x,5),from=-4,to=4,ylab="",xlab="",lty=4,lwd=3,add=T,col=coul[4])
# Create the legend text with labels for different degrees of freedom and the normal distribution
{legtxt <- c(expression(paste(italic(n)," = 1", sep="")),
expression(paste(italic(n)," = 2",sep="")),
expression(paste(italic(n)," = 5",sep="")),
expression(paste(italic(N),"(0,1)",sep="")))}
# Add the legend to the plot
{legend("topleft",legtxt,lty=c(1,2,4,5),lwd=3,col=c(coul[2],coul[3],coul[4],coul[1]), cex=1.6,bg="white",inset=0.0225)}
## Plot the binomial quantile function for different numbers of seeds (n = 200 to 250)
plot(200:250,qbinom(0.05,200:250,0.85)) #x-axis is associated with n and y-axis with the
# number of successes
abline(h=200) ## Add a horizontal line at 200 germinated seeds
abline(v=246) ## # Add a vertical line to show n = 246 seeds
fd <- dbinom(c(0:330),330,0.85)
# Plot the probability density function (PDF) for 330 seeds
plot(fd~c(0:330),xlim=c(240,300),ylim=c(0,.08),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the PDF (p(X=x)). For example, there is 6.1% of chance to have 282 feet.
plot(cumsum(fd)~c(0:330),xlim=c(240,300),ylim=c(0,1),type="p",ylab=" ",xlab=" ",pch=15,cex=1,lwd=3,col=coul[1],cex.axis=2)
# This figure provides the cumulative distribution function (F(X=x)=P(X<=x)). For example, there is 55.4% of chance that the student obtain less than 282 feet of Zostera.
